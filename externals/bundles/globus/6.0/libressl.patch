diff -u -r globus_toolkit-6.0.1506371041/gsi/callback/source/library/globus_gsi_callback.c globus_toolkit-6.0.1506371041.patched-short/gsi/callback/source/library/globus_gsi_callback.c
--- globus_toolkit-6.0.1506371041/gsi/callback/source/library/globus_gsi_callback.c	2017-09-25 15:35:57.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi/callback/source/library/globus_gsi_callback.c	2018-04-25 15:45:04.000000000 -0500
@@ -39,7 +39,7 @@
 #include "globus_oldgaa_utils.h"
 #endif
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 #define X509_STORE_CTX_get0_chain(ctx) (ctx)->chain
 #define X509_STORE_CTX_get0_cert(ctx) (ctx)->cert
 #define X509_get_pathlen(x509) (x509)->ex_pathlen
@@ -381,7 +381,7 @@
 
     GLOBUS_I_GSI_CALLBACK_DEBUG_ENTER;
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
     /*
      * OpenSSL-0.9.6 has a  check_issued routine which
      * we want to override so we  can replace some of the checks.
@@ -1157,7 +1157,7 @@
             {
                 int idx;
 
-#               if OPENSSL_VERSION_NUMBER < 0x10100000L
+#               if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
                 {
                     CRYPTO_w_lock(CRYPTO_LOCK_X509_STORE);
                     idx=sk_X509_OBJECT_find(x509_context->ctx->objs, x509_object);
@@ -1237,7 +1237,7 @@
                     new_crl = PEM_read_X509_CRL(crl_fp, &new_crl, NULL, NULL);
                     fclose(crl_fp);
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
                     X509_STORE_add_crl(x509_context->ctx, new_crl);
 #else
                     X509_STORE_add_crl(X509_STORE_CTX_get0_store(x509_context), new_crl);
diff -u -r globus_toolkit-6.0.1506371041/gsi/credential/source/library/globus_gsi_cred_handle.c globus_toolkit-6.0.1506371041.patched-short/gsi/credential/source/library/globus_gsi_cred_handle.c
--- globus_toolkit-6.0.1506371041/gsi/credential/source/library/globus_gsi_cred_handle.c	2017-09-25 15:35:57.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi/credential/source/library/globus_gsi_cred_handle.c	2018-04-25 15:45:35.000000000 -0500
@@ -1751,7 +1751,7 @@
         X509_STORE_CTX_set_depth(store_context,
                                  GLOBUS_GSI_CALLBACK_VERIFY_DEPTH);
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
         /* override the check_issued with our version */
         store_context->check_issued = globus_gsi_callback_check_issued;
 #else
@@ -1944,7 +1944,7 @@
                                  GLOBUS_GSI_CALLBACK_VERIFY_DEPTH);
 
         /* override the check_issued with our version */
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
         store_context->check_issued = globus_gsi_callback_check_issued;
 #else
         X509_STORE_set_check_issued(X509_STORE_CTX_get0_store(store_context), globus_gsi_callback_check_issued);
diff -u -r globus_toolkit-6.0.1506371041/gsi/credential/source/library/globus_gsi_credential.c globus_toolkit-6.0.1506371041.patched-short/gsi/credential/source/library/globus_gsi_credential.c
--- globus_toolkit-6.0.1506371041/gsi/credential/source/library/globus_gsi_credential.c	2017-09-25 15:35:57.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi/credential/source/library/globus_gsi_credential.c	2018-04-25 15:45:23.000000000 -0500
@@ -26,7 +26,7 @@
 #ifndef GLOBUS_DONT_DOCUMENT_INTERNAL
 
 #define d2i_arg_2_cast (const unsigned char **)
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 #define PKCS12_bag_type(b) M_PKCS12_bag_type(b)
 #define PKCS12_cert_bag_type(b) M_PKCS12_cert_bag_type(b)
 #define PKCS12_SAFEBAG_get0_p8inf(bag) (bag)->value.keybag;
diff -u -r globus_toolkit-6.0.1506371041/gsi/gssapi/source/library/accept_delegation.c globus_toolkit-6.0.1506371041.patched-short/gsi/gssapi/source/library/accept_delegation.c
--- globus_toolkit-6.0.1506371041/gsi/gssapi/source/library/accept_delegation.c	2017-09-25 15:35:57.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi/gssapi/source/library/accept_delegation.c	2018-04-25 15:47:38.000000000 -0500
@@ -256,7 +256,7 @@
                 major_status = GSS_S_FAILURE;
                 goto mutex_unlock;
             }
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
                 peer_digest = EVP_get_digestbynid(
                         OBJ_obj2nid(peer_cert->sig_alg->algorithm));
 #else
diff -u -r globus_toolkit-6.0.1506371041/gsi/gssapi/source/library/accept_sec_context.c globus_toolkit-6.0.1506371041.patched-short/gsi/gssapi/source/library/accept_sec_context.c
--- globus_toolkit-6.0.1506371041/gsi/gssapi/source/library/accept_sec_context.c	2017-09-25 15:35:57.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi/gssapi/source/library/accept_sec_context.c	2018-04-25 15:47:23.000000000 -0500
@@ -407,7 +407,7 @@
                     major_status = GSS_S_FAILURE;
                     break;
                 }
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
                 peer_digest = EVP_get_digestbynid(
                         OBJ_obj2nid(peer_cert->sig_alg->algorithm));
 #else
diff -u -r globus_toolkit-6.0.1506371041/gsi/gssapi/source/library/get_hash.c globus_toolkit-6.0.1506371041.patched-short/gsi/gssapi/source/library/get_hash.c
--- globus_toolkit-6.0.1506371041/gsi/gssapi/source/library/get_hash.c	2017-09-25 15:35:57.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi/gssapi/source/library/get_hash.c	2018-04-25 15:46:56.000000000 -0500
@@ -44,7 +44,7 @@
 
     #if OPENSSL_VERSION_NUMBER < 0x10000000L
     hash_nid = EVP_MD_type(context->gss_ssl->read_hash);
-    #elif OPENSSL_VERSION_NUMBER < 0x10100000L
+    #elif OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
     if (context->gss_ssl->read_hash->digest != NULL)
     {
         hash_nid = EVP_MD_CTX_type(context->gss_ssl->read_hash);
diff -u -r globus_toolkit-6.0.1506371041/gsi/gssapi/source/library/globus_i_gsi_gss_utils.c globus_toolkit-6.0.1506371041.patched-short/gsi/gssapi/source/library/globus_i_gsi_gss_utils.c
--- globus_toolkit-6.0.1506371041/gsi/gssapi/source/library/globus_i_gsi_gss_utils.c	2017-09-25 15:35:57.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi/gssapi/source/library/globus_i_gsi_gss_utils.c	2018-04-25 15:46:35.000000000 -0500
@@ -32,7 +32,7 @@
 #include <string.h>
 #include <stdlib.h>
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 #include "globus_ssl_locl.h"
 
 #define X509_STORE_set_check_issued(store, func) (store)->check_issued = (func)
@@ -288,7 +288,7 @@
     context->locally_initiated = (cred_usage == GSS_C_INITIATE);
     context->ctx_flags |= GSS_I_CTX_INITIALIZED;
     context->mech = mech;
-#if OPENSSL_VERSION_NUMBER >= 0x10000100L
+#if OPENSSL_VERSION_NUMBER >= 0x10000100L && !defined(LIBRESSL_VERSION_NUMBER)
     context->mac_read_sequence = 0;
     context->mac_write_sequence = 0;
     context->mac_key = NULL;
@@ -423,7 +423,7 @@
                 context);
         }
     }
-#if OPENSSL_VERSION_NUMBER >= 0x10002000L
+#if OPENSSL_VERSION_NUMBER >= 0x10002000L && !defined(LIBRESSL_VERSION_NUMBER)
     if (cred_usage != GSS_C_INITIATE
         && context->alpn != NULL)
     {
@@ -533,7 +533,7 @@
                     context->gss_ssl,
                     target_name->host_name);
     }
-#if OPENSSL_VERSION_NUMBER >= 0x10002000L
+#if OPENSSL_VERSION_NUMBER >= 0x10002000L && !defined(LIBRESSL_VERSION_NUMBER)
     /* Set the ALPN if we're the client and have one set */
     if (cred_usage == GSS_C_INITIATE
         && context->alpn != NULL)
@@ -585,7 +585,7 @@
             major_status = GSS_S_FAILURE;
             goto free_cert_dir;   
         }
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+#if OPENSSL_VERSION_NUMBER >= 0x10100000L && !defined(LIBRESSL_VERSION_NUMBER)
         /* Security level 0 is needed to use eNULL ciphers */
         SSL_set_security_level(context->gss_ssl, 0);
 #endif
@@ -995,7 +995,7 @@
             
             /* problem! */
             
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
             GLOBUS_I_GSI_GSSAPI_DEBUG_FPRINTF(
                 2, (globus_i_gsi_gssapi_debug_fstream,
                     "disp=%d,level=%d,desc=%d,left=%d\n",
@@ -1084,7 +1084,7 @@
             const EVP_CIPHER *      evp_cipher = NULL;
             const SSL_CIPHER *      current_cipher = NULL;
 
-            #if OPENSSL_VERSION_NUMBER >= 0x10000100L
+            #if OPENSSL_VERSION_NUMBER >= 0x10000100L && !defined(LIBRESSL_VERSION_NUMBER)
             size_t                      keying_material_len = 0;
             #endif
 
@@ -1101,7 +1101,7 @@
 
             current_cipher = SSL_get_current_cipher(context_handle->gss_ssl);
 
-            #if OPENSSL_VERSION_NUMBER >= 0x10000100L
+            #if OPENSSL_VERSION_NUMBER >= 0x10000100L && !defined(LIBRESSL_VERSION_NUMBER)
             if (evp_cipher != NULL && EVP_CIPHER_key_length(evp_cipher) > 0)
             {
                 keying_material_len = EVP_CIPHER_key_length(evp_cipher);
@@ -1179,7 +1179,7 @@
              */
 
             
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
             if ((current_cipher->algo_strength & SSL_STRONG_MASK) >= SSL_LOW) 
             {
                 context_handle->ret_flags |= GSS_C_CONF_FLAG;
@@ -2024,7 +2024,7 @@
         ssl_handle->session,
         &ssl_handle->s3->tmp.new_sym_enc,
         &ssl_handle->s3->tmp.new_hash,
-#if (OPENSSL_VERSION_NUMBER >= 0x10000000L)
+#if (OPENSSL_VERSION_NUMBER >= 0x10000000L) && !defined(LIBRESSL_VERSION_NUMBER)
         &ssl_handle->s3->tmp.new_mac_pkey_type,
         &ssl_handle->s3->tmp.new_mac_secret_size,
 #endif
@@ -2056,7 +2056,7 @@
         ssl_handle->session,
         &ssl_handle->s3->tmp.new_sym_enc,
         &ssl_handle->s3->tmp.new_hash,
-#if (OPENSSL_VERSION_NUMBER >= 0x10000000L)
+#if (OPENSSL_VERSION_NUMBER >= 0x10000000L) && !defined(LIBRESSL_VERSION_NUMBER)
         &ssl_handle->s3->tmp.new_mac_pkey_type,
         &ssl_handle->s3->tmp.new_mac_secret_size,
 #endif
@@ -2232,7 +2232,7 @@
     }
 #endif
    /* openssl 1.1.0 adds a new method of setting this, deprecates old */ 
-    #if (OPENSSL_VERSION_NUMBER >= 0x10100000L)
+    #if (OPENSSL_VERSION_NUMBER >= 0x10100000L) && !defined(LIBRESSL_VERSION_NUMBER)
     cred_handle->ssl_context = SSL_CTX_new(TLS_method());
     #else
     cred_handle->ssl_context = SSL_CTX_new(SSLv23_method());
@@ -2255,7 +2255,11 @@
     if (globus_i_gsi_gssapi_min_tls_protocol == 0)
         globus_i_gsi_gssapi_min_tls_protocol = TLS1_VERSION;
     if (globus_i_gsi_gssapi_max_tls_protocol == 0)
+      #if defined(LIBRESSL_VERSION_NUMBER)
+        globus_i_gsi_gssapi_max_tls_protocol = TLS1_2_VERSION;
+      #else
         globus_i_gsi_gssapi_max_tls_protocol = TLS_MAX_VERSION;
+      #endif
     GLOBUS_I_GSI_GSSAPI_DEBUG_FPRINTF(
         3, (globus_i_gsi_gssapi_debug_fstream,
         "MIN_TLS_PROTOCOL: %x\n", globus_i_gsi_gssapi_min_tls_protocol));
@@ -2264,7 +2268,7 @@
         "MAX_TLS_PROTOCOL: %x\n", globus_i_gsi_gssapi_max_tls_protocol));
 
     /* openssl 1.1.0 adds a new method of setting this, deprecates old */
-    #if (OPENSSL_VERSION_NUMBER >= 0x10100000L)
+    #if (OPENSSL_VERSION_NUMBER >= 0x10100000L) && !defined(LIBRESSL_VERSION_NUMBER)
     {
         SSL_CTX_set_min_proto_version(cred_handle->ssl_context,
                                globus_i_gsi_gssapi_min_tls_protocol);
@@ -2983,7 +2987,7 @@
     }
 }
 
-#if OPENSSL_VERSION_NUMBER >= 0x10002000L
+#if OPENSSL_VERSION_NUMBER >= 0x10002000L && !defined(LIBRESSL_VERSION_NUMBER)
 int
 globus_l_gsi_gss_alpn_select_callback(
     SSL                                *ssl,
diff -u -r globus_toolkit-6.0.1506371041/gsi/gssapi/source/library/globus_ssl_locl.h globus_toolkit-6.0.1506371041.patched-short/gsi/gssapi/source/library/globus_ssl_locl.h
--- globus_toolkit-6.0.1506371041/gsi/gssapi/source/library/globus_ssl_locl.h	2017-09-25 15:35:57.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi/gssapi/source/library/globus_ssl_locl.h	2018-04-25 15:46:47.000000000 -0500
@@ -1,7 +1,7 @@
 #ifndef GLOBUS_SSL_LOCL_H
 #define GLOBUS_SSL_LOCL_H
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
 #if (OPENSSL_VERSION_NUMBER >= 0x10000000L)
 #define SSL_STRONG_MASK 0x000001fcL
diff -u -r globus_toolkit-6.0.1506371041/gsi/gssapi/source/library/wrap.c globus_toolkit-6.0.1506371041.patched-short/gsi/gssapi/source/library/wrap.c
--- globus_toolkit-6.0.1506371041/gsi/gssapi/source/library/wrap.c	2017-09-25 15:35:57.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi/gssapi/source/library/wrap.c	2018-04-25 15:47:10.000000000 -0500
@@ -83,7 +83,7 @@
     {
         #if OPENSSL_VERSION_NUMBER < 0x10000000L
         overhead = 17 + EVP_MD_size(context->gss_ssl->write_hash); 
-        #elif OPENSSL_VERSION_NUMBER < 0x10100000L
+        #elif OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
         overhead = 17 + EVP_MD_size(context->gss_ssl->write_hash->digest); 
         #else
 
diff -u -r globus_toolkit-6.0.1506371041/gsi/proxy/proxy_core/source/library/globus_gsi_proxy.c globus_toolkit-6.0.1506371041.patched-short/gsi/proxy/proxy_core/source/library/globus_gsi_proxy.c
--- globus_toolkit-6.0.1506371041/gsi/proxy/proxy_core/source/library/globus_gsi_proxy.c	2017-09-25 15:35:57.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi/proxy/proxy_core/source/library/globus_gsi_proxy.c	2018-04-25 15:45:46.000000000 -0500
@@ -31,11 +31,11 @@
 #include "globus_error_openssl.h"
 #include "globus_openssl.h"
 
-#if OPENSSL_VERSION_NUMBER < 0x10002000L
+#if OPENSSL_VERSION_NUMBER < 0x10002000L || defined(LIBRESSL_VERSION_NUMBER)
 #define X509_get_signature_nid(c) \
             OBJ_obj2nid((c)->sig_alg->algorithm)
 #endif
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 #define BN_GENCB_new() malloc(sizeof(BN_GENCB))
 #define BN_GENCB_free(g) free(g)
 #endif
@@ -1146,6 +1146,29 @@
 }
 /* globus_gsi_proxy_sign_req */
 
+static int
+my_ASN1_digest(i2d_of_void *i2d, const EVP_MD *type, char *data,
+                unsigned char *md, unsigned int *len)
+{
+    int i;
+    unsigned char *str, *p;
+
+    i = i2d(data, NULL);
+    if ((str = OPENSSL_malloc(i)) == NULL) {
+        ASN1err(ASN1_F_ASN1_DIGEST, ERR_R_MALLOC_FAILURE);
+        return 0;
+    }
+    p = str;
+    i2d(data, &p);
+
+    if (!EVP_Digest(str, i, md, len, type, NULL)) {
+        OPENSSL_free(str);
+        return 0;
+    }
+    OPENSSL_free(str);
+    return 1;
+}
+
 static globus_result_t
 globus_l_gsi_proxy_sign_key(
     globus_gsi_proxy_handle_t           handle,
@@ -1278,7 +1301,7 @@
 
         ext_method = X509V3_EXT_get_nid(pci_NID);
 
-        ASN1_digest((i2d_of_void *) i2d_PUBKEY,sha1,(char *) public_key,md,&len);
+        my_ASN1_digest((i2d_of_void *) i2d_PUBKEY,sha1,(char *) public_key,md,&len);
 
         sub_hash = md[0] + (md[1] + (md[2] + (md[3] >> 1) * 256) * 256) * 256; 
         
diff -u -r globus_toolkit-6.0.1506371041/gsi/proxy/proxy_core/source/library/globus_gsi_proxy_handle.c globus_toolkit-6.0.1506371041.patched-short/gsi/proxy/proxy_core/source/library/globus_gsi_proxy_handle.c
--- globus_toolkit-6.0.1506371041/gsi/proxy/proxy_core/source/library/globus_gsi_proxy_handle.c	2017-09-25 15:35:57.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi/proxy/proxy_core/source/library/globus_gsi_proxy_handle.c	2018-04-25 15:46:25.000000000 -0500
@@ -35,10 +35,10 @@
 
 #include "globus_i_gsi_proxy.h"
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 #define EVP_PKEY_id(k) (k)->type
 #endif
-#if OPENSSL_VERSION_NUMBER < 0x10002000L
+#if OPENSSL_VERSION_NUMBER < 0x10002000L || defined(LIBRESSL_VERSION_NUMBER)
 static
 STACK_OF(X509_EXTENSION) *
 sk_X509_EXTENSION_deep_copy(
diff -u -r globus_toolkit-6.0.1506371041/gsi/proxy/proxy_utils/source/programs/grid-cert-diagnostics.c globus_toolkit-6.0.1506371041.patched-short/gsi/proxy/proxy_utils/source/programs/grid-cert-diagnostics.c
--- globus_toolkit-6.0.1506371041/gsi/proxy/proxy_utils/source/programs/grid-cert-diagnostics.c	2017-09-25 15:35:57.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi/proxy/proxy_utils/source/programs/grid-cert-diagnostics.c	2018-04-25 15:47:49.000000000 -0500
@@ -27,7 +27,7 @@
 #include <getopt.h>
 #endif
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
 #define EVP_PKEY_get0_RSA(k) (k)->pkey.rsa
 
@@ -707,7 +707,7 @@
     }
 
     pubkey = X509_PUBKEY_get(X509_get_X509_PUBKEY(x509_cert));
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
     key_type = EVP_PKEY_type(pubkey->type);
 #else
     key_type = EVP_PKEY_base_id(pubkey);
@@ -724,7 +724,7 @@
     }
 
     printf("Checking that private key is an RSA key... ");
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
     key_type = EVP_PKEY_type(privkey->type);
 #else
     key_type = EVP_PKEY_base_id(privkey);
@@ -985,7 +985,7 @@
 
     pubkey = X509_PUBKEY_get(X509_get_X509_PUBKEY(x509_cert));
     printf("Checking that certificate contains an RSA key... ");
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
     key_type = EVP_PKEY_type(pubkey->type);
 #else
     key_type = EVP_PKEY_base_id(pubkey);
@@ -1188,7 +1188,7 @@
     SSL_CTX                            *ctx;
     SSL                                *ssl;
     BIO                                *web = NULL;
-    #if (OPENSSL_VERSION_NUMBER >= 0x10100000L)
+    #if (OPENSSL_VERSION_NUMBER >= 0x10100000L) && !defined(LIBRESSL_VERSION_NUMBER)
     const SSL_METHOD                   *method = TLS_method();
     #else
     const SSL_METHOD                   *method = SSLv23_method();
@@ -1206,7 +1206,7 @@
         ERR_print_errors_fp(stderr);
         goto ctx_new_fail;
     }
-    #if (OPENSSL_VERSION_NUMBER >= 0x10100000L)
+    #if (OPENSSL_VERSION_NUMBER >= 0x10100000L) && !defined(LIBRESSL_VERSION_NUMBER)
     SSL_CTX_set_min_proto_version(ctx,TLS1_VERSION);
     #else
     SSL_CTX_set_options(ctx,SSL_OP_NO_SSLv2|SSL_OP_NO_SSLv3);
@@ -1293,7 +1293,7 @@
     SSL_CTX                            *ctx;
     SSL                                *ssl;
     BIO                                *cbio = NULL, *rbio = NULL, *wbio = NULL;
-    #if (OPENSSL_VERSION_NUMBER >= 0x10100000L)
+    #if (OPENSSL_VERSION_NUMBER >= 0x10100000L) && !defined(LIBRESSL_VERSION_NUMBER)
     const SSL_METHOD                   *method = TLS_method();
     #else
     const SSL_METHOD                   *method = SSLv23_method();
@@ -1313,7 +1313,7 @@
         ERR_print_errors_fp(stderr);
         goto ctx_new_fail;
     }
-    #if (OPENSSL_VERSION_NUMBER >= 0x10100000L)
+    #if (OPENSSL_VERSION_NUMBER >= 0x10100000L) && !defined(LIBRESSL_VERSION_NUMBER)
     SSL_CTX_set_min_proto_version(ctx,TLS1_VERSION);
     #else
     SSL_CTX_set_options(ctx,SSL_OP_NO_SSLv2|SSL_OP_NO_SSLv3);
diff -u -r globus_toolkit-6.0.1506371041/gsi_openssh/source/cipher.c globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/cipher.c
--- globus_toolkit-6.0.1506371041/gsi_openssh/source/cipher.c	2017-09-25 22:42:29.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/cipher.c	2018-04-25 15:49:15.000000000 -0500
@@ -51,6 +51,9 @@
 
 #include "openbsd-compat/openssl-compat.h"
 
+#ifndef OPENSSL_NO_RC4
+#define OPENSSL_NO_RC4
+#endif
 #ifdef WITH_SSH1
 extern const EVP_CIPHER *evp_ssh1_bf(void);
 extern const EVP_CIPHER *evp_ssh1_3des(void);
diff -u -r globus_toolkit-6.0.1506371041/gsi_openssh/source/configure globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/configure
--- globus_toolkit-6.0.1506371041/gsi_openssh/source/configure	2017-09-25 22:42:35.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/configure	2018-04-25 15:49:29.000000000 -0500
@@ -20932,7 +20932,7 @@
 if test "$ac_res" != no; then :
   test "$ac_res" = "none required" || LIBS="$ac_res $LIBS"
 
-$as_echo "#define ENABLE_PKCS11 /**/" >>confdefs.h
+$as_echo "/* #define ENABLE_PKCS11 */" >>confdefs.h
 
 
 fi
diff -u -r globus_toolkit-6.0.1506371041/gsi_openssh/source/entropy.c globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/entropy.c
--- globus_toolkit-6.0.1506371041/gsi_openssh/source/entropy.c	2017-09-25 22:42:29.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/entropy.c	2018-04-25 15:48:10.000000000 -0500
@@ -217,7 +217,7 @@
 		fatal("OpenSSL version mismatch. Built against %lx, you "
 		    "have %lx", (u_long)OPENSSL_VERSION_NUMBER, SSLeay());
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 	atexit(RAND_cleanup);
 #endif
 
diff -u -r globus_toolkit-6.0.1506371041/gsi_openssh/source/libcrypto-compat.c globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/libcrypto-compat.c
--- globus_toolkit-6.0.1506371041/gsi_openssh/source/libcrypto-compat.c	2017-09-25 22:42:29.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/libcrypto-compat.c	2018-04-25 15:48:24.000000000 -0500
@@ -9,7 +9,7 @@
 
 #include "includes.h"
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
 #include <string.h>
 #include <openssl/engine.h>
diff -u -r globus_toolkit-6.0.1506371041/gsi_openssh/source/libcrypto-compat.h globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/libcrypto-compat.h
--- globus_toolkit-6.0.1506371041/gsi_openssh/source/libcrypto-compat.h	2017-09-25 22:42:29.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/libcrypto-compat.h	2018-04-25 15:48:38.000000000 -0500
@@ -1,7 +1,7 @@
 #ifndef LIBCRYPTO_COMPAT_H
 #define LIBCRYPTO_COMPAT_H
 
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 
 #include <openssl/rsa.h>
 #include <openssl/dsa.h>
diff -u -r globus_toolkit-6.0.1506371041/gsi_openssh/source/openbsd-compat/openssl-compat.c globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/openbsd-compat/openssl-compat.c
--- globus_toolkit-6.0.1506371041/gsi_openssh/source/openbsd-compat/openssl-compat.c	2017-09-25 22:42:29.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/openbsd-compat/openssl-compat.c	2018-04-25 15:48:50.000000000 -0500
@@ -70,12 +70,12 @@
 void
 ssh_OpenSSL_add_all_algorithms(void)
 {
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 	OpenSSL_add_all_algorithms();
 
 	/* Enable use of crypto hardware */
 	ENGINE_load_builtin_engines();
-#if OPENSSL_VERSION_NUMBER < 0x10001000L
+#if OPENSSL_VERSION_NUMBER < 0x10001000L || defined(LIBRESSL_VERSION_NUMBER)
 	ENGINE_register_all_complete();
 #endif
 	OPENSSL_config(NULL);
diff -u -r globus_toolkit-6.0.1506371041/gsi_openssh/source/ssh.c globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/ssh.c
--- globus_toolkit-6.0.1506371041/gsi_openssh/source/ssh.c	2017-09-25 22:42:29.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/gsi_openssh/source/ssh.c	2018-04-25 15:49:05.000000000 -0500
@@ -556,7 +556,7 @@
 	sanitise_stdfd();
 
 	__progname = ssh_get_progname(av[0]);
-#if OPENSSL_VERSION_NUMBER < 0x10100000L
+#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 	SSLeay_add_all_algorithms();
 #endif
 	init_pathnames();
diff -u -r globus_toolkit-6.0.1506371041/packaging/package-output/hpn_isshd-gsi_ossl.7.5p1b.patch globus_toolkit-6.0.1506371041.patched-short/packaging/package-output/hpn_isshd-gsi_ossl.7.5p1b.patch
--- globus_toolkit-6.0.1506371041/packaging/package-output/hpn_isshd-gsi_ossl.7.5p1b.patch	2017-09-25 15:37:43.000000000 -0500
+++ globus_toolkit-6.0.1506371041.patched-short/packaging/package-output/hpn_isshd-gsi_ossl.7.5p1b.patch	2018-04-25 15:47:59.000000000 -0500
@@ -674,7 +674,7 @@
  		fatal("OpenSSL version mismatch. Built against %lx, you "
  		    "have %lx", (u_long)OPENSSL_VERSION_NUMBER, SSLeay());
  
-+#if OPENSSL_VERSION_NUMBER < 0x10100000L
++#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 +	atexit(RAND_cleanup);
 +#endif
 +
@@ -1147,7 +1147,7 @@
 +
 +#include "includes.h"
 +
-+#if OPENSSL_VERSION_NUMBER < 0x10100000L
++#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 +
 +#include <string.h>
 +#include <openssl/engine.h>
@@ -1691,7 +1691,7 @@
 +#ifndef LIBCRYPTO_COMPAT_H
 +#define LIBCRYPTO_COMPAT_H
 +
-+#if OPENSSL_VERSION_NUMBER < 0x10100000L
++#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 +
 +#include <openssl/rsa.h>
 +#include <openssl/dsa.h>
@@ -1825,12 +1825,12 @@
  void
  ssh_OpenSSL_add_all_algorithms(void)
  {
-+#if OPENSSL_VERSION_NUMBER < 0x10100000L
++#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
  	OpenSSL_add_all_algorithms();
  
  	/* Enable use of crypto hardware */
  	ENGINE_load_builtin_engines();
-+#if OPENSSL_VERSION_NUMBER < 0x10001000L
++#if OPENSSL_VERSION_NUMBER < 0x10001000L || defined(LIBRESSL_VERSION_NUMBER)
  	ENGINE_register_all_complete();
 +#endif
  	OPENSSL_config(NULL);
@@ -2672,7 +2672,7 @@
  	sanitise_stdfd();
  
  	__progname = ssh_get_progname(av[0]);
-+#if OPENSSL_VERSION_NUMBER < 0x10100000L
++#if OPENSSL_VERSION_NUMBER < 0x10100000L || defined(LIBRESSL_VERSION_NUMBER)
 +	SSLeay_add_all_algorithms();
 +#endif
  	init_pathnames();
