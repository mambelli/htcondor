#!/usr/bin/python

import classad
import datetime
import os
import pickle
import re
import sys
import tempfile
import types
import unittest
import warnings

from pytest.CondorTest import CondorTest
from pytest.Globals import *
from pytest.Utils import Utils

_long_type = int if sys.version_info > (3,) else long


def assertIs(val1, val2, subtest, msg=""):
    if val1 is val2:
        CondorTest.RegisterSuccess(subtest, "Value " + str(val1) + " is " + str(val2) + ", as expected")
    else:
        failureMessage = "Value " + str(val1) + " is not " + str(val2)
        if msg != "": failureMessage = msg
        CondorTest.RegisterFailure(subtest, failureMessage)

def assertIsNot(val1, val2, subtest, msg=""):
    if val1 is not val2:
        CondorTest.RegisterSuccess(subtest, "Value " + str(val1) + " is not " + str(val2) + ", as expected")
    else:
        failureMessage = "Value " + str(val1) + " is " + str(val2)
        if msg != "": failureMessage = msg
        CondorTest.RegisterFailure(subtest, failureMessage)

def assertEqual(val1, val2, subtest, msg=""):
    if val1 == val2:
        CondorTest.RegisterSuccess(subtest, "Values " + str(val1) + " and " + str(val2) + " are equal, as expected")
    else:
        failureMessage = "Values " + str(val1) + " and " + str(val2) + " not equal"
        if msg != "": failureMessage = msg
        CondorTest.RegisterFailure(subtest, failureMessage)

def assertNotEqual(val1, val2, subtest, msg=""):
    if val1 == val2:
        failureMessage = "Values " + str(val1) + " and " + str(val2) + " are equal"
        if msg != "": failureMessage = msg
        CondorTest.RegisterFailure(subtest, failureMessage)
    else:
        CondorTest.RegisterSuccess(subtest, "Values " + str(val1) + " and " + str(val2) + " are unequal, as expected")

def assertRaises(exception, callable, subtest, args=[], kwds=[], msg=""):
    try:
        callable(args)
    except exception as error:
        CondorTest.RegisterSuccess(subtest, "Raised an exception " + str(exception) + ", as expected")
        return
    failureMessage = "Did not raise exception " + str(exception)
    if msg != "": failureMessage = msg
    CondorTest.RegisterFailure(subtest, failureMessage)

def assertTrue(expr, subtest, msg=""):
    if expr is True:
        CondorTest.RegisterSuccess(subtest, "Expression " + str(expr) + " is True, as expected")
    else:
        failureMessage = "Expression " + str(expr) + " is not True"
        if msg != "": failureMessage = msg
        CondorTest.RegisterFailure(subtest, failureMessage)

def assertFalse(expr, subtest, msg=""):
    if expr is False:
        CondorTest.RegisterSuccess(subtest, "Expression " + str(expr) + " is False, as expected")
    else:
        failureMessage = "Expression " + str(expr) + " is not False"
        if msg != "": failureMessage = msg
        CondorTest.RegisterFailure(subtest, failureMessage)

def one_ad_verify(ad, subtest):
    assertEqual(len(ad), 2, subtest)
    assertEqual(ad["foo"], 1, subtest)
    assertEqual(ad["bar"], 2, subtest)

def new_ads_verify(ads, subtest):
    ads = list(ads)
    assertEqual(len(ads), 2, subtest)
    ad1, ad2 = ads
    assertEqual(ad1["foo"], "bar", subtest)
    assertIs(ad1["baz"], classad.Value.Undefined, subtest)
    assertEqual(ad2["bar"], 1, subtest)
    assertEqual(len(ad1), 2, subtest)
    assertEqual(len(ad2), 1, subtest)
    assertRaises(KeyError, ad1.__getitem__, subtest, "bar")

def old_ads_verify(ads, subtest):
    ads = list(ads)
    assertEqual(len(ads), 2, subtest)
    ad1, ad2 = ads
    assertEqual(ad1["MaxHosts"], 1, subtest)
    assertEqual(ad1["Managed"], "Schedd", subtest)
    assertEqual(ad2["User"], "bbockelm@users.opensciencegrid.org", subtest)
    assertEqual(ad2["SUBMIT_x509userproxy"], "/tmp/x509up_u1221", subtest)
    assertEqual(len(ad1), 2, subtest)
    assertEqual(len(ad2), 2, subtest)



def test_classad_constructor():
    ad = classad.ClassAd('[foo = "1"; bar = 2]')
    assertEqual(ad['foo'], "1", "test_classad_constructor-1")
    assertEqual(ad['bar'], 2, "test_classad_constructor-2")
    assertRaises(KeyError, ad.__getitem__, "test_classad_constructor-3", "baz")

def test_pickle():
    ad = classad.ClassAd({"one": 1})
    expr = classad.ExprTree("2+2")
    pad = pickle.dumps(ad)
    pexpr = pickle.dumps(expr)
    ad2 = pickle.loads(pad)
    expr2 = pickle.loads(pexpr)
    assertEqual(ad2.__repr__(), "[ one = 1 ]", "test_pickle-1")
    assertEqual(expr2.__repr__(), "2 + 2", "test_pickle-2")

def test_load_classad_from_file():
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        ad = classad.parse(open("python_bindings/test.ad"))
    assertEqual(ad["foo"], "bar", "test_load_classad_from_file-1")
    assertIs(ad["baz"], classad.Value.Undefined, "test_load_classad_from_file-2")
    assertRaises(KeyError, ad.__getitem__, "test_load_classad_from_file-3", "bar")

def test_load_classad_from_file_v2():
    ad = classad.parseOne(open("python_bindings/test.ad"))
    assertEqual(ad["foo"], "bar", "test_load_classad_from_file_v2-1")
    assertIs(ad["baz"], classad.Value.Undefined, "test_load_classad_from_file_v2-2")
    assertRaises(KeyError, ad.__getitem__, "test_load_classad_from_file_v2-3", "bar")

def test_parse_one():
    ad = classad.parseOne("foo = 1\nbar = 2")
    one_ad_verify(ad, "test_parse_one-1")
    ad = classad.parseOne("[foo = 1; bar = 2]")
    one_ad_verify(ad, "test_parse_one-2")
    ad = classad.parseOne("foo = 1", classad.Parser.New)
    assertEqual(len(ad), 0, "test_parse_one-3")
    one_ad_verify(classad.parseOne("foo = 1\nbar = 2\n"), "test_parse_one-4")
    one_ad_verify(classad.parseOne("foo = 1\nbar = 1\n\nbar = 2\n"), "test_parse_one-5")
    ad = classad.parseOne("[foo = 1]", classad.Parser.Old)
    assertEqual(len(ad), 0, "test_parse_one-6")
    one_ad_verify(classad.parseOne("[foo = 1; bar = 1;] [bar = 2]"), "test_parse_one-7")
    one_ad_verify(classad.parseOne("-------\nfoo = 1\nbar = 2\n\n"), "test_parse_one-8")

def test_parse_iter():
    tf = tempfile.TemporaryFile()
    tf.write(b"[foo = 1] [bar = 2]")
    tf.seek(0)
    if sys.version_info > (3,):
        tf,tf_ = open(tf.fileno()), tf
    ad_iter = classad.parseAds(tf)
    ad = next(ad_iter)
    assertEqual(len(ad), 1, "test_parse_iter-1")
    assertEqual(ad["foo"], 1, "test_parse_iter-2")
    assertEqual(" [bar = 2]", tf.read(), "test_parse_iter-3")
    tf = tempfile.TemporaryFile()
    tf.write(b"-----\nfoo = 1\n\nbar = 2\n")
    tf.seek(0)
    if sys.version_info > (3,):
        tf,tf_ = open(tf.fileno()), tf
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        ad_iter = classad.parseOldAds(tf)
    ad = next(ad_iter)
    assertEqual(len(ad), 1, "test_parse_iter-4")
    assertEqual(ad["foo"], 1, "test_parse_iter-5")
    assertEqual("bar = 2\n", tf.read(), "test_parse_iter-6")

def test_parse_next():
    tf = tempfile.TemporaryFile()
    tf.write(b"[foo = 1] [bar = 2]")
    tf.seek(0)
    if sys.version_info > (3,):
        tf,tf_ = open(tf.fileno()), tf
    ad = classad.parseNext(tf)
    assertEqual(len(ad), 1, "test_parse_next-1")
    assertEqual(ad["foo"], 1, "test_parse_next-2")
    assertEqual(" [bar = 2]", tf.read(), "test_parse_next-3")
    tf = tempfile.TemporaryFile()
    tf.write(b"-----\nfoo = 1\n\nbar = 2\n")
    tf.seek(0)
    if sys.version_info > (3,):
        tf,tf_ = open(tf.fileno()), tf
    ad = classad.parseNext(tf)
    assertEqual(len(ad), 1, "test_parse_next-4")
    assertEqual(ad["foo"], 1, "test_parse_next-5")
    assertEqual("bar = 2\n", tf.read(), "test_parse_next-6")

def test_load_classads():
    new_ads_verify(classad.parseAds(open("python_bindings/test_multiple.ad")), "test_load_classads-1")
    new_ads_verify(classad.parseAds(open("python_bindings/test_multiple.ad").read()), "test_load_classads-2")
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        old_ads_verify(classad.parseOldAds(open("python_bindings/test_multiple.old.ad")), "test_load_classads-3")
        old_ads_verify(classad.parseOldAds(open("python_bindings/test_multiple.old.ad").read()), "test_load_classads-4")
    old_ads_verify(classad.parseAds(open("python_bindings/test_multiple.old.ad")), "test_load_classads-5")
    old_ads_verify(classad.parseAds(open("python_bindings/test_multiple.old.ad").read()), "test_load_classads-6")

def test_warnings():
    with warnings.catch_warnings(record=True) as w:
        warnings.simplefilter("always")
        classad.parseOld("foo = 1\nbar = 2")
        assertEqual(len(w), 1, "test_warnings-1")
        assertTrue(issubclass(w[-1].category, DeprecationWarning), "test_warnings-2")
        assertTrue("deprecated" in str(w[-1].message), "test_warnings-3")

def test_old_classad():
    with warnings.catch_warnings():
        warnings.simplefilter("ignore")
        ad = classad.parseOld(open("python_bindings/test.old.ad"))
    contents = open("python_bindings/test.old.ad").read()
    keys = []
    for line in contents.splitlines():
        info = line.split(" = ")
        if len(info) != 2:
            continue
        assertTrue(info[0] in ad, "test_old_classad-1")
        assertEqual(ad.lookup(info[0]).__repr__(), info[1], "test_old_classad-2")
        keys.append(info[0])
    for key in ad:
        assertTrue(key in keys, "test_old_classad-3")

def test_old_classad_v2():
    ad = classad.parseNext(open("python_bindings/test.old.ad"))
    contents = open("python_bindings/test.old.ad").read()
    keys = []
    for line in contents.splitlines():
        info = line.split(" = ")
        if len(info) != 2:
            continue
        assertTrue(info[0] in ad, "test_old_classad_v2-1")
        assertEqual(ad.lookup(info[0]).__repr__(), info[1], "test_old_classad_v2-2")
        keys.append(info[0])
    for key in ad:
        assertTrue(key in keys, "test_old_classad_v2-3")

def test_exprtree():
    ad = classad.ClassAd()
    ad["foo"] = classad.ExprTree("2+2")
    expr = ad["foo"]
    assertEqual(expr.__repr__(), "2 + 2", "test_exprtree-1")
    assertEqual(expr.eval(), 4, "test_exprtree-2")

def test_exprtree_func():
    ad = classad.ClassAd()
    ad["foo"] = classad.ExprTree('regexps("foo (bar)", "foo bar", "\\\\1")')
    assertEqual(ad.eval("foo"), "bar", "test_exprtree_func-1")

def test_list_conversion():
    ad = dict(classad.ClassAd("[a = {1,2,3}]"))
    assertTrue(isinstance(ad["a"], list), "test_list_conversion-1")
    assertTrue(isinstance(ad["a"][0], _long_type), "test_list_conversion-2")
    def listAdd(a, b): return a+b
    classad.register(listAdd)
    assertEqual(classad.ExprTree("listAdd({1,2}, {3,4})")[0], 1, "test_list_conversion-3")

def test_dict_conversion():
    ad = classad.ClassAd({'a': [1,2, {}]})
    dict_ad = dict(ad)
    assertTrue(isinstance(dict_ad["a"][2], dict), "test_dict_conversion-1")
    assertEqual(classad.ClassAd(dict_ad).__repr__(), "[ a = { 1,2,[  ] } ]", "test_dict_conversion-2")
    ad = classad.ClassAd("[a = [b = {1,2,3}]]")
    inner_list = dict(ad)['a']['b']
    assertTrue(isinstance(inner_list, list), "test_dict_conversion-3")
    assertTrue(isinstance(inner_list[0], _long_type), "test_dict_conversion-4")
    assertTrue(isinstance(ad['a'], dict), "test_dict_conversion-5")

def test_ad_assignment():
    ad = classad.ClassAd()
    ad["foo"] = 2.1
    assertEqual(ad["foo"], 2.1, "test_ad_assignment-1")
    ad["foo"] = 2
    assertEqual(ad["foo"], 2, "test_ad_assignment-2")
    ad["foo"] = "bar"
    assertEqual(ad["foo"], "bar", "test_ad_assignment-3")
    assertRaises(TypeError, ad.__setitem__, "test_ad_assignment-4", {})

def test_ad_refs():
    ad = classad.ClassAd()
    ad["foo"] = classad.ExprTree("bar + baz")
    ad["bar"] = 2.1
    ad["baz"] = 4
    assertEqual(ad["foo"].__repr__(), "bar + baz", "test_ad_refs-1")
    assertEqual(ad.eval("foo"), 6.1, "test_ad_refs-2")

def test_ad_special_values():
    ad = classad.ClassAd()
    ad["foo"] = classad.ExprTree('regexp(12, 34)')
    ad["bar"] = classad.Value.Undefined
    assertIs(ad["foo"].eval(), classad.Value.Error, "test_ad_special_values-1")
    assertIsNot(ad["foo"].eval(), ad["bar"], "test_ad_special_values-2")
    assertIs(classad.Value.Undefined, ad["bar"], "test_ad_special_values-3")

# FIXME: Doesn't work in Windows
def test_ad_iterator():
    ad = classad.ClassAd()
    ad["fool"] = 1
    ad["barl"] = 2
    assertEqual(len(ad), 2, "test_ad_iterator-1")
    assertEqual(len(list(ad)), 2, "test_ad_iterator-2")
    assertEqual(list(ad)[1], "fool", "test_ad_iterator-3")
    assertEqual(list(ad)[0], "barl", "test_ad_iterator-4")
    assertEqual(list(ad.items())[1][1], 1, "test_ad_iterator-5")
    assertEqual(list(ad.items())[0][1], 2, "test_ad_iterator-6")
    assertEqual(list(ad.values())[1], 1, "test_ad_iterator-7")
    assertEqual(list(ad.values())[0], 2, "test_ad_iterator-8")

def test_ad_lookup():
    ad = classad.ClassAd()
    ad["foo"] = classad.Value.Error
    assertTrue(isinstance(ad.lookup("foo"), classad.ExprTree), "test_ad_lookup-1")
    assertIs(ad.lookup("foo").eval(), classad.Value.Error, "test_ad_lookup-2")

def test_get():
    ad = classad.ClassAd()
    assertEqual(ad.get("foo"), None, "test_get-1")
    assertEqual(ad.get("foo", "bar"), "bar", "test_get-2")
    ad["foo"] = "baz"
    assertEqual(ad.get("foo"), "baz", "test_get-3")
    assertEqual(ad.get("foo", "bar"), "baz", "test_get-4")

def test_setdefault():
    ad = classad.ClassAd()
    assertEqual(ad.setdefault("foo", "bar"), "bar", "test_setdefault-1")
    assertEqual(ad.get("foo"), "bar", "test_setdefault-2")
    ad["bar"] = "baz"
    assertEqual(ad.setdefault("bar", "foo"), "baz", "test_setdefault-3")

def test_update():
    ad = classad.ClassAd()
    ad.update({"1": 2})
    assertTrue("1" in ad, "test_update-1")
    assertEqual(ad["1"], 2, "test_update-2")
    ad.update([("1",3)])
    assertEqual(ad["1"], 3, "test_update-3")
    other = classad.ClassAd({"3": "5"})
    ad.update(other)
    del other
    assertTrue("3" in ad, "test_update-4")
    assertEqual(ad["3"], "5", "test_update-5")

def test_invalid_ref():
    expr = classad.ExprTree("foo")
    assertIs(classad.Value.Undefined, expr.eval(), "test_invalid_ref-1")

def test_temp_scope():
    expr = classad.ExprTree("foo")
    assertEqual("bar", expr.eval(classad.ClassAd({"foo": "bar"})), "test_temp_scope-1")
    ad = classad.ClassAd({"foo": "baz", "test": classad.ExprTree("foo")})
    expr = ad["test"]
    assertEqual("baz", expr.eval(), "test_temp_scope-2")
    assertEqual("bar", expr.eval(classad.ClassAd({"foo": "bar"})), "test_temp_scope-3")
    assertEqual("bar", expr.eval(classad.ClassAd({"foo": "bar"})), "test_temp_scope-4")
    assertEqual("baz", expr.eval(), "test_temp_scope-5")

def test_abstime():
    expr = classad.ExprTree('absTime("2013-11-12T07:50:23")')
    dt = expr.eval()
    assertTrue(isinstance(dt, datetime.datetime), "test_abstime-1")
    assertEqual(dt.year, 2013, "test_abstime-2")
    assertEqual(dt.month, 11, "test_abstime-3")
    assertEqual(dt.day, 12, "test_abstime-4")
    assertEqual(dt.hour, 7, "test_abstime-5")
    assertEqual(dt.minute, 50, "test_abstime-6")
    assertEqual(dt.second, 23, "test_abstime-7")
    ad = classad.ClassAd({"foo": dt})
    dt2 = ad["foo"]
    assertTrue(isinstance(dt2, datetime.datetime), "test_abstime-8")
    assertEqual(dt, dt2, "test_abstime-9")
    ad = classad.ClassAd({"foo": datetime.datetime.now()});
    td = (datetime.datetime.now()-ad["foo"])
    assertEqual(td.days, 0, "test_abstime-10")
    assertTrue(td.seconds < 300, "test_abstime-11")

def test_reltime():
    expr = classad.ExprTree('relTime(5)')
    assertEqual(expr.eval(), 5, "test_reltime-1")

def test_quote():
    assertEqual(classad.quote("foo"), '"foo"', "test_quote-1")
    assertEqual(classad.quote('"foo'), '"\\"foo"', "test_quote-2")
    for i in ["foo", '"foo', '"\\"foo']:
        assertEqual(i, classad.unquote(classad.quote(i)), "test_quote-3")

def test_literal():
    assertEqual(classad.ExprTree('"foo"'), classad.Literal("foo"), "test_literal-1")
    assertEqual(classad.Literal(1).eval(), 1, "test_literal-2")

def test_operator():
    expr = classad.Literal(1) + 2
    assertTrue(isinstance(expr, classad.ExprTree), "test_operator-1")
    assertTrue(expr.sameAs(classad.ExprTree('1 + 2')), "test_operator-2")
    expr = classad.Literal(1) & 2
    assertTrue(isinstance(expr, classad.ExprTree), "test_operator-3")
    assertEqual(expr.eval(), 0, "test_operator-4")
    assertTrue(expr.sameAs(classad.ExprTree('1 & 2')), "test_operator-5")
    expr = classad.Attribute("foo").is_(classad.Value.Undefined)
    assertTrue(expr.eval(), "test_operator-6")
    ad = classad.ClassAd("[foo = 1]")
    expr = classad.Attribute("foo").isnt_(classad.Value.Undefined)
    assertTrue(expr.eval(ad), "test_operator-7")
    expr = classad.Literal(1).and_( classad.Literal(2) )
    # FIXME: Fix the following subtest
    # assertRaises(RuntimeError, expr.eval, "test_operator-8", expr)

def test_subscript():
    ad = classad.ClassAd({'foo': [0,1,2,3]})
    expr = classad.Attribute("foo")._get(2)
    assertTrue(isinstance(expr, classad.ExprTree), "test_subscript-1")
    assertIs(expr.eval(), classad.Value.Undefined, "test_subscript-2")
    assertEqual(expr.eval(ad), 2, "test_subscript-3")

def test_function():
    expr = classad.Function("strcat", "hello", " ", "world")
    assertTrue(isinstance(expr, classad.ExprTree), "test_function-1")
    assertEqual(expr.eval(), "hello world", "test_function-2")
    expr = classad.Function("regexp", ".*")
    assertIs(expr.eval(), classad.Value.Error, "test_function-3")

def test_flatten():
    expr = classad.Attribute("foo") == classad.Attribute("bar")
    ad = classad.ClassAd({"bar": 1})
    assertTrue(ad.flatten(expr).sameAs( classad.ExprTree('foo == 1') ), "test_flatten-1")

def test_matches():
    left = classad.ClassAd('[requirements = other.foo == 3; bar=1]')
    right = classad.ClassAd('[foo = 3]')
    right2 = classad.ClassAd('[foo = 3; requirements = other.bar == 1;]')
    assertFalse(left.matches(right), "test_matches-1")
    assertTrue(right.matches(left), "test_matches-2")
    assertFalse(right.symmetricMatch(left), "test_matches-3")
    assertTrue(left.matches(right2), "test_matches-4")
    assertTrue(right2.symmetricMatch(left), "test_matches-5")

def test_bool():
    assertTrue(bool( classad.ExprTree('true || false') ), "test_bool-1")
    assertTrue(bool( classad.Literal(True).or_(False) ), "test_bool-2")
    assertFalse(bool( classad.ExprTree('true && false') ), "test_bool-3")
    assertFalse(bool( classad.Literal(True).and_(False) ), "test_bool-4")

def test_register():
    class BadException(Exception): pass
    def myAdd(a, b): return a+b
    def myBad(a, b): raise BadException("bad")
    def myComplex(a): return 1j # ClassAds have no complex numbers, not able to convert from python to an expression
    def myExpr(**kw): return classad.ExprTree("foo") # Functions must return values; this becomes "undefined".
    def myFoo(foo): return foo['foo']
    def myIntersect(a, b): return set(a).intersection(set(b))
    classad.register(myAdd)
    classad.register(myAdd, name='myAdd2')
    classad.register(myBad)
    classad.register(myComplex)
    classad.register(myExpr)
    classad.register(myFoo)
    classad.register(myIntersect)
    assertEqual(3, classad.ExprTree('myAdd(1, 2)').eval(), "test_register-1")
    assertEqual(3, classad.ExprTree('myAdd2(1, 2)').eval(), "test_register-2")
    assertRaises(BadException, classad.ExprTree('myBad(1, 2)').eval, "test_register-3")
    assertRaises(TypeError, classad.ExprTree('myComplex(1)').eval, "test_register-4")
    assertIs(classad.Value.Undefined, classad.ExprTree('myExpr()').eval(), "test_register-5")
    assertEqual(classad.ExprTree('myExpr()').eval(classad.ClassAd({"foo": 2})), 2, "test_register-6")
    # FIXME: myAdd requires 2 arguments; only one is given.
    # assertRaises(TypeError, classad.ExprTree('myAdd(1)').eval, "test_register-7")
    assertEqual(classad.ExprTree('myFoo([foo = 1])').eval(), 1, "test_register-8")
    assertEqual(classad.ExprTree('size(myIntersect({1, 2}, {2, 3}))').eval(), 1, "test_register-9")
    assertEqual(classad.ExprTree('myIntersect({1, 2}, {2, 3})[0]').eval(), 2, "test_register-10")

def test_state():
    def myFunc(state): return 1 if state else 0
    classad.register(myFunc)
    assertEqual(0, classad.ExprTree('myFunc(false)').eval(), "test_state-1")
    assertEqual(1, classad.ExprTree('myFunc("foo")').eval(), "test_state-2")
    ad = classad.ClassAd("[foo = myFunc(); bar = 2]")
    assertEqual(1, ad.eval('foo'), "test_state-3")
    ad['foo'] = classad.ExprTree('myFunc(1)')
    assertRaises(TypeError, ad.eval, "test_state-4", ('foo',))
    def myFunc(arg1, **kw): return kw['state']['bar']
    classad.register(myFunc)
    assertEqual(2, ad.eval('foo'), "test_state-5")

def test_refs():
    ad = classad.ClassAd({"bar": 2})
    expr = classad.ExprTree("foo =?= bar")
    assertEqual(ad.externalRefs(expr), ["foo"], "test_refs-1")
    assertEqual(ad.internalRefs(expr), ["bar"], "test_refs-2")

def test_cast():
    assertEqual(4, int(classad.ExprTree('1+3')), "test_cast-1")
    assertEqual(4.5, float(classad.ExprTree('1.0+3.5')), "test_cast-2")
    assertEqual(34, int(classad.ExprTree('strcat("3", "4")')), "test_cast-3")
    assertEqual(34.5, float(classad.ExprTree('"34.5"')), "test_cast-4")
    assertRaises(ValueError, float, "test_cast-5", classad.ExprTree('"34.foo"'))
    assertRaises(ValueError, int, "test_cast-6", classad.ExprTree('"12 "'))
    ad = classad.ClassAd("[foo = 2+5; bar = foo]")
    expr = ad['bar']
    assertEqual(7, int(expr), "test_cast-7")
    assertEqual(7, int(ad.lookup('bar')), "test_cast-8")
    assertEqual(0, int(classad.ExprTree('false')), "test_cast-9")
    assertEqual(0.0, float(classad.ExprTree('false')), "test_cast-10")
    assertEqual(1, int(classad.ExprTree('true')), "test_cast-11")
    assertEqual(1.0, float(classad.ExprTree('true')), "test_cast-12")
    assertEqual(3, int(classad.ExprTree('3.99')), "test_cast-13")
    assertEqual(3.0, float(classad.ExprTree('1+2')), "test_cast-14")
    assertRaises(ValueError, int, "test_cast-15", classad.ExprTree('undefined'))
    assertRaises(ValueError, float, "test_cast-16", classad.ExprTree('error'))
    assertRaises(ValueError, float, "test_cast-17", classad.ExprTree('foo'))

def test_pipes():
    # One regression we saw in the ClassAd library is the new
    # parsing routines would fail if tell/seek was non-functional.
    r, w = os.pipe()
    rfd = os.fdopen(r, 'r')
    wfd = os.fdopen(w, 'w')
    wfd.write("[foo = 1]")
    wfd.close()
    ad = classad.parseNext(rfd ,parser=classad.Parser.New)
    assertEqual(tuple(dict(ad).items()), (('foo', 1),), "test_pipes-1")
    # TODO: Fix the following test.
    # The reason it's failing is because the classad.Parser.New keyword isn't getting passed to the function call.
    #assertRaises(StopIteration, classad.parseNext, "test_pipes-2", [rfd, classad.Parser.New])
    rfd.close()
    r, w = os.pipe()
    rfd = os.fdopen(r, 'r')
    wfd = os.fdopen(w, 'w')
    wfd.write("[foo = 1]")
    wfd.close()
    assertRaises(ValueError, classad.parseNext, "test_pipes-3", rfd)
    rfd.close()

def main():

    test_classad_constructor()
    test_pickle()
    test_parse_one()
    test_parse_iter()
    test_parse_next()
    test_warnings()
    test_exprtree()
    test_exprtree_func()
    test_list_conversion()
    test_dict_conversion()
    test_ad_assignment()
    test_ad_refs()
    test_ad_special_values()
    test_ad_lookup()
    test_get()
    test_setdefault()
    test_update()
    test_invalid_ref()
    test_temp_scope()
    test_abstime()
    test_reltime()
    test_quote()
    test_literal()
    test_operator()
    test_subscript()
    test_function()
    test_flatten()
    test_matches()
    test_bool()
    test_register()
    test_state()
    test_refs()
    test_cast()
    test_pipes()

    if Utils.IsWindows() is False:
        test_load_classad_from_file()
        test_load_classad_from_file_v2()
        test_load_classads()
        test_old_classad()
        test_old_classad_v2()
        test_ad_iterator()




if __name__ == "__main__":
    main()

